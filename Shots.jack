class Shots {
    field int x, y; // location of a Shots
    field boolean isActive;

    // Manejo de posiciones
    constructor Shots new() {
        let x = 0;
        let y = 0;
        return this;
    }

    method void setXY(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() { return x; }
    method int getY() { return y; }
    method boolean getActive() { return isActive; }


    /** Dibujar disparo **/
        method void draw() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 384);
        do Memory.poke(memAddress+64, 384);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 704);
        do Memory.poke(memAddress+320, 1608);
        do Memory.poke(memAddress+352, 4128);
        do Memory.poke(memAddress+384, 17668);
        do Memory.poke(memAddress+416, 2064);
        do Memory.poke(memAddress+448, 16512);
        do Memory.poke(memAddress+480, 1032);
        return;
    }

    /** Borrar **/
    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    // Iniciar disparo
    method void fire(int Ax, int Ay) {
        do setXY(Ax, Ay);
        do activate();
        return;
    }

    method void run() {
        //Movimiento del disparo
        if (isActive) { do moveUp(); }
        return;
    }

    // Cambiar estaod del disparo a activo
    method void activate() {
        let isActive = true;
        do moveUp();
        return;
    }

    // Cambiar estado del disparo a inactivo (Desactivar)
    method void deactivate() {
        let isActive = false;
        do erase();
        return;
    }

    // Movimiento hacia arriba
    method void moveUp() {
        if (~isActive) { return; }
        if (y > 1) {
            do erase();
            let y = y - 2;
            do draw();
        }
        else {
            do deactivate();
        }
        return;
    }
}
