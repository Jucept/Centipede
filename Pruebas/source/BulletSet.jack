/*
BulletSet - class that allows to fire up to sixteen bullets.
By default all bullets are inactive and wait in a "pool".
When player fires a bullet, first inactive bullet from a pool
becomes active, its coords are set to player's coords
and animation of a projectile begins.
When bullet reaches upper end of screen or hits a target
it becomes inactive and returns to the pool.

There's also code to check for bullet's collision with enemies.

Collision detection code is tricky:
1. a method handleEnemyDown is called, it accepts enemies set
2. then, a method checkIfHit is called on enemies set, all bullets are passed there as argument
3. checkIfHit calls method handleOneEnemyDown of this class for all enemies in a set
4. handleOneEnemyDown checks one particular buller with one particular enemy for collision

In this tricky call chain we have O(bullets*enemies) checks, comparing every bullet
with every enemy ship.
 */
class BulletSet {
    /* pool of 16 bullets */
    field Bullet bullet01;


    constructor BulletSet new() {
        let bullet01 = Bullet.new();
        return this;
    }

    method void dispose() {
        do bullet01.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run(EnemySet e) {
        /* gets called from programs mainloop.
           Makes each bullet fly if necessary,
           also checks for collisions */
        do bullet01.run();
        do handleEnemyDown(e);
        return;
    }

    /** fire bullet from coords x, y **/
    method void fire(int x, int y) {
        /* tries to find first inactive bullet
           to launch it */
        if (~bullet01.getActive()) {
            do bullet01.fire(x, y);
        } 
        return;
    }

    /** checks collision between a bullet and an enemy ship **/
    method boolean isEnemyDown(Bullet b, EnemyShip e) {
        var int bx, by, ex, ey;
        if (~b.getActive()) { return false; }
        if (~e.isAlive()) { return false; }
        let bx = b.getX();
        let by = b.getY();
        let ex = e.getX();
        let ey = e.getY();
        if (by < ey) { // bullet is higher than enemy
            // x coord of a bullet and enemy overlaps
            if (bx > (ex - 18)) {
                if (bx < (ex + 18)) {
                    return true;
                }
            }
        }
        return false;
    }

    /** kill an enemy ship with a bullet **/
    method void kill(Bullet b, EnemyShip e) {
        do e.die(); // start explosion animation, mark enemy as inactive, etc
        do b.deactivate(); // disable bullet, its job is done
        return;
    }

    /** check all enemies for collision with all bullets **/
    method void handleEnemyDown(EnemySet enemies) {
        do enemies.checkIfHit(this);
        return;
    }

    /** checks one enemy ship for collision with all bullets **/
    method void handleOneEnemyDown(EnemyShip enemy) {
        if (isEnemyDown(bullet01, enemy)) {
            do kill(bullet01, enemy);
        }
        return;
    }
}
