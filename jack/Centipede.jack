/*
Centipede 
 */
class Centipede {
    field boolean isAlive; // is in game
    field boolean death; 
    field int x, y;
    field boolean toRight;
    field int offset; // offset to the left or to the right
    field Block block;
    field boolean animate;

    constructor Centipede new() {
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        do block.dispose();
        return;
    }

    method void activate(int Ax, int Ay) {
        let isAlive = true;
        let death = false;
        let animate = false;
        let x = Ax;
        let y = Ay;
        let toRight = true; // start moving to the right
        let offset = 0;
        return;
    }

    /** disable **/
    method void deactivate() {
        let isAlive = false;
        let death = false;
        do erase();
        return;
    }

    /** getters **/
    method int getX() { return x; }
    method int getY() { return y; }
    method boolean isAlive() { return isAlive; }

    /** block **/
    method void die() {
        do erase();
        do block.draw(x,y); // Dibujar bloque al morir
        let isAlive = false;
        return;
    }

    /** render animation 1 **/
    method void draw1() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        // column 0
        do Memory.poke(memAddress, 524);
        do Memory.poke(memAddress +32, 2320);
        do Memory.poke(memAddress +64, 1302);
        do Memory.poke(memAddress +96, 1268);
        do Memory.poke(memAddress +128, 924);
        do Memory.poke(memAddress +160, 6661);
        do Memory.poke(memAddress +192, 1542);
        do Memory.poke(memAddress +224, 1026);
        do Memory.poke(memAddress +256, 1026);
        do Memory.poke(memAddress +288, 1542);
        do Memory.poke(memAddress +320, 6661);
        do Memory.poke(memAddress +352, 924);
        do Memory.poke(memAddress +384, 1268);
        do Memory.poke(memAddress +416, 1302);
        do Memory.poke(memAddress +448, 2320);
        do Memory.poke(memAddress +480, 524);
        let animate = true;
        return;
    }

    /** render animation 2 **/
    method void draw2() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        // column 0
        do Memory.poke(memAddress, 1030);
        do Memory.poke(memAddress +32, 520);
        do Memory.poke(memAddress +64, 6419);
        do Memory.poke(memAddress +96, 1268);
        do Memory.poke(memAddress +128, 924);
        do Memory.poke(memAddress +160, 6661);
        do Memory.poke(memAddress +192, 1542);
        do Memory.poke(memAddress +224, 1026);
        do Memory.poke(memAddress +256, 1026);
        do Memory.poke(memAddress +288, 1542);
        do Memory.poke(memAddress +320, 6661);
        do Memory.poke(memAddress +352, 924);
        do Memory.poke(memAddress +384, 1268);
        do Memory.poke(memAddress +416, 6419);
        do Memory.poke(memAddress +448, 520);
        do Memory.poke(memAddress +480, 1030);
        let animate = false;
        return;
    }

    /** render white pixels on top of enemy ship, effectively erasing it **/
    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        return;
    }

    /** move enemy ship down, swaying it sideways, to the left or to the right **/
    method void move() {
        if (y < 231) {
            do erase(); // clear
            if (toRight) { // if moving to the right
                if (x < 505) { // move further to the right
                    let x = x + 25;
                } else { // switch direction and move down
                    let toRight = false;
                    let y = y + 20;
                }
            } else { // if moving to the left
                if (x > 5) { // move further to the left
                    let x = x - 25;
                } else { // switch direction and move down
                    let toRight = true;
                    let y = y + 20;
                }
            }
            if (~animate) {
                do draw1();
            } else {
                do draw2();
            }
        }
        return;
    }

    /** perform whatever is necessary in current state, gets called from programs mainloop **/
    method void run() {
        if (~isAlive) { return; }
        if (~death) {
            do move();
        }
        else { // otherwise if active and exploding, die
            do die();
        }
        return;
    }
}
