class Ship {
    field int x, y;

    constructor Ship new(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        do draw();
        return this;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int memAddress; 
        let memAddress = 16384+ (x/16) + (y*32);
        // column 0
        do Memory.poke(memAddress, 128);
        do Memory.poke(memAddress +32, 128);
        do Memory.poke(memAddress +64, 128);
        do Memory.poke(memAddress +96, 448);
        do Memory.poke(memAddress +128, 320);
        do Memory.poke(memAddress +160, 320);
        do Memory.poke(memAddress +192, 320);
        do Memory.poke(memAddress +224, 21349);
        do Memory.poke(memAddress +256, 21029);
        do Memory.poke(memAddress +288, 21029);
        do Memory.poke(memAddress +320, 29223);
        do Memory.poke(memAddress +352, 25123);
        do Memory.poke(memAddress +384, 29719);
        do Memory.poke(memAddress +416, 31727);
        do Memory.poke(memAddress +448, 23577);
        return;

    }

    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        return;
    }

    method void moveLeft() {
        if (x > 1) {
            do erase();
            let x = x - 2;
            do draw();
        }
        return;
    }

    method void moveRight() {
        if (x < 510) {
            do erase();
            let x = x + 2;
            do draw();
        }
        return;
    }

    method void moveDown() {
        if (y < 240) {
            do erase();
            let y = y + 2;
            do draw();
        }
        return;
    }

    method void moveUp() {
        if (y > 170) {
            do erase();
            let y = y - 2;
            do draw();
        }
        return;
    }

}
