class GameCentipede {
    field Ship ship;
    field ManageShots shots;
    field ManageCentipede parts; // parts set
    field Centipede centipede;
    field int direction; // the ship's current direction
    // 0=none, 3=left, 4=right
    field int skipTurnsBetweenShots; // counter that prevents from firing all shots all at once
    field int partFloatInterval; // counter that prevents enemies from moving too fast
    field Array blocks; // Array to hold the blocks
    field int sizeX, sizeY; // Limits for block placement
    field Block block;

    constructor GameCentipede new() {
        var int i;

        do Random.setSeed(RandSeed.getSeed());
        // init ship's model in the middle of the bottom of the screen
        let ship = Ship.new(248, 230);
        let direction = 0;  // initial state is no movement
        let shots = ManageShots.new();
        let parts = ManageCentipede.new();
        let sizeX = 510; // Example size, adjust as needed
        let sizeY = 230; // Example size, adjust as needed
        do parts.activate();
        
        // Initialize blocks RANDOM
        //let blocks = Array.new(15); // Example with 10 blocks
        let i = 0;
        while (i < 15) {
            //let blocks[i] = block;
            do block.placeBlock(sizeX, sizeY);
            let i = i + 1;
        }
        
        return this;
    }

    method void dispose() {
        do ship.dispose();
        do shots.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** move ship's jet depending on direction **/
    method void moveship() {
        if (direction = 1) { do ship.moveUp(); }
        if (direction = 2) { do ship.moveDown(); }
        if (direction = 3) { do ship.moveLeft(); }
        if (direction = 4) { do ship.moveRight(); }
        if (direction > 0) { let direction = 0; }
        return;
    }

    method void endGame(String text) {
        do Output.moveCursor(10, 30);
        do Output.printString(text);
        return;
    }

    /** programs mainloop **/
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        let exit = false;

        while (~exit) {
            let key = Keyboard.keyPressed();
            if (key = 81)  { let exit = true; }     // q key
            if (key = 32)  { // space key
                // limit fire rate, ship can fire every 40 * 5 (Sys.wait arg) mainloop "ticks"
                if (skipTurnsBetweenShots > 40) {
                    let skipTurnsBetweenShots = 0;
                }
                else {
                    if (skipTurnsBetweenShots = 0) {
                        // launch shot from ships coord + a bit higher
                        // so that shot launches not from the ship's jet itself
                        // but slightly above it. Prevents ship's jet from being
                        // overdrawn by shot
                        do shots.fire(ship.getX(), ship.getY() - 16);
                    }
                    let skipTurnsBetweenShots = skipTurnsBetweenShots + 1;
                }
            }
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; } // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            // enemy can move every 50 * 5 mainloop "ticks"
            if (partFloatInterval > 50) {
                let partFloatInterval = 0;
            } else {
                if (partFloatInterval = 0) { do parts.run(); }
                let partFloatInterval = partFloatInterval + 1;
            }

            // move ship according to direction variable value
            do moveship();
            // run shot's mainloop, pass enemies set in there
            // to detect collisions of enemies with shots
            do shots.run(parts);

            // if no enemies are left alive, the game is finished
            if (~parts.anyAlivePart()) {
                do endGame("YOU WIN");
                let exit = true;
            }
            else {
                // if an enemy reaches end of the screen, game is over
                // enemies don't get renewed, so it is possible to kill them all
                if (parts.reachedEnd()) {
                    do endGame("GAME OVER");
                    let exit = true;
                }
            }

            // sleep
            do Sys.wait(5);
        }
        return;
    }
}
